<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
            "http://www.docbook.org/xml/4.4/docbookx.dtd">
<chapter>
    <title>Usage/Quick Start</title>
    <section>
        <title>Getting Started</title>
        <para>
            The <application>Semantic Engine</application> is a header-only library. There is nothing
            to compile. Everything is <code>inline</code>d. In order to use the library, all you need
            to do is <code>#include</code> the necessary files and start using the library. 
        </para>
        
        <section id="indexing">
            <title>Indexing Some Files</title>
            <para>
                In this section we will write a short program to index some files. These files will be
                textual in nature, and the index will be stored in an <application>SQLite 3</application>
                database.
            </para>
            <procedure>
                <title>
                    Example Program: Index Files
                </title>
                <step>
                    <para>
                        First, we must include the necessary <application>Semantic Engine</application>
                        files to do our indexing.
                    </para>
                    <programlisting><![CDATA[
#include <semantic/semantic.hpp>
#include <semantic/indexing.hpp>
#include <semantic/storage/sqlite3.hpp>]]>
                    </programlisting>
                </step>
                <step>
                    <para>
                        The next step is to construct a graph object, name the collection and point it
                        to an <application>SQLite 3</application> database file (which need not exist yet).
                    </para>
                    <para>
                        We will omit the <code>int main()</code> function for brevity. 
                    </para>
                    <programlisting><![CDATA[
typedef semantic::SEGraph<semantic::SQLite3StoragePolicy> MyGraph;

MyGraph graph("test collection");
graph.set_file("my_index.db");
                        ]]>
                    </programlisting>
                </step>
                <step>
                    <para>
                        Next we will create the text indexing helper object, which will allow us to
                        easily parse a block of text, apply some natural language processing on it, 
                        stem words and construct the graph. By default, all this happens automatically.
                    </para>
                    <programlisting><![CDATA[
typedef semantic::text_indexer<MyGraph> MyIndexer;

MyIndexer indexer(graph, "/usr/local/share/semantic/tagger/lexicon.txt.gz");]]>
                    </programlisting>
                    <para>
                        The <filename>lexicon.txt.gz</filename> file should have been installed with the
                        <application>Semantic Engine</application> library. You may supply your own
                        lexicon (in another language, for example) or use the convenient
                        <code>LEXICON_INSTALL_LOCATION</code> which is defined in <filename>semantic/config.hpp</filename>.
                    </para>
                </step>
                <step>
                    <para>
                        Now comes the fun part. Let's index some files! Our loop here iterates through
                        an imaginary <code>std::vector</code> of strings pointing to text files on our
                        hard drive. 
                    </para>
                    <programlisting><![CDATA[
g.set_mirror_changes_to_storage(true);

for(std::vector<;std::string>::iterator it = my_filenames.begin();
            it != my_filesnames.end(); ++it) {
    indexer.index(*it);
}
                        
g.set_mirror_changes_to_storage(false);
g.commit_changes_to_storage();
                        ]]>
                    </programlisting>
                    <para>
                        Now you might be asking, what do the functions <code>set_mirror_changes_to_storage()</code>
                        and <code>commit_changes_to_storage()</code> do? The answer is simple: the <code>SEGraph</code>
                        object holds the index in memory. There are times when analysis is performed on the graph object
                        and you don't want operations on the graph to be reflected in your on-disk index. By default
                        the value of <code>set_mirror_changes_to_storage()</code> is <code>false</code>. By setting
                        it to <code>true</code> the graph will begin keeping track of changes you make. When 
                        <code>commit_changes_to_storage()</code> is called, those changes will be written to disk. Depending
                        on the amount of text indexed, this process can take a while (as a general rule, about 5 minutes
                        per 15,000 paragraphs of text). 
                    </para>
                </step>
            </procedure>
        </section>
        <section id="basic_search">
            <title>Performing a Basic Search</title>
            <para>Now let's perform a basic search on our index. This requires the use of the <code>SESubgraph</code> 
                class instead of <code>SEGraph</code> (now in a sense we're still using <code>SEGraph</code> as it is a 
                superclass of <code>SESubgraph</code>). A search in the <application>Semantic Engine</application> is nothing
                more than extracting a subgraph of the main graph. Since indices become rather large rather quickly, it is
                a big time-saver to work with subgraphs.
            </para> 
            <procedure>
                <title>Example Program: Basic Search</title>
                <step>
                    <para>
                        Like in our previous example, let's start with the includes.
                    </para>
                    <programlisting><![CDATA[
#include <semantic/subgraph.hpp>
#include <semantic/search.hpp>

// as per normal, we need a storage policy -- this will allow us access to our index
#incldue <semantic/storage/sqlite3.hpp>
                        
// subgraphs are built by using a subgraph policy
#include <semantic/subgraph/pruning_random_walk.hpp>
                        
// and a weighting policy is necessary for some subgraph policies, as well
// as for ranking operations
#include <semantic/weighting/lg.hpp>
#include <semantic/weighting/tf.hpp>
#include <semantic/weighting/idf.hpp>
                        ]]>
                    </programlisting>
                    <para>
                        The three weighting policy files we will use to combine into one weighting policy. 
                        <filename>lg.hpp</filename> defines <emphasis>Local/Global</emphasis> weighting, <filename>tf.hpp</filename>
                        defines <emphasis>Term Frequency</emphasis> and <filename>idf.hpp</filename> defines
                        <emphasis>Inverse Document Frequency</emphasis>. We will combine these to create TF/IDF weighting. 
                    </para>
                </step>
                <step>
                    <para>
                        It's on to creating a new <code>SESubgraph</code> object and performing a search. The search will
                        be from a textual query, and will populate the subgraph with nodes and edges.
                    </para>
                    <para>
                        Again, we will omit the <code>int main()</code> function.
                    </para>
                    <programlisting><![CDATA[
typedef semantic::SESubgraph<
    semantic::SQLite3StoragePolicy, 
    semantic::PruningRandomWalkSubgraph, 
    semantic::LGWeighting<semantic::TFWeighting, semantic::IDFWeighting>
    > MySubgraph;
typedef semantic::search<MySubgraph> MySearchHelper;
                        
MySubgraph graph("test collection");
graph.set_file("my_index.db");

MySearchHelper search_helper(graph);

std::vector<std::pair<std::string, double> >
    my_documents, my_terms;

boost::tie(my_documents, my_terms) = search_helper.semantic("my query string");
                                ]]>
                    </programlisting>
                    <para>
                        In case you are wondering, <code>boost::tie()</code> allows you to set the first parameter
                        to the value of the first element of a <code>std::pair</code> and the second to the second.
                        <code>search_helper.semantic()</code> returns a <code>std::pair</code> of the above
                        <code>std::vector</code>s. The results returned by our helper will be sorted. 
                    </para>
                </step>
                <step>
                    <para>
                        Now, let's just print out our results and we're done!
                    </para>
                    <programlisting><![CDATA[
std::cout << "Top 10 terms: ";
for(unsigned int i = 0; i < 10 &amp;&amp; i < my_terms.size(); i++)
    std::cout << my_terms[i].first << " ";
std::cout << std::endl;
std::cout << "Results:" << std::endl;
for(unsigned int i = 0; i < my_documents.size(); i++)
    std::cout << "Rank: " << my_documents[i].second << ", Document: " << my_documents[i].first << std::endl;
                        ]]>
                    </programlisting>
                </step>
            </procedure>
        </section>
    </section>
    <section>
        <title>Going Further</title>
        <para>
            The <application>Semantic Engine</application> is capable of far more than mere indexing and searching.
            Further information can be found in <xref linkend="examples"/> and <xref linkend="api"/>.
        </para>
    </section>
</chapter>